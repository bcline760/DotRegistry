// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DotRegistry.Contract;
//
//    var providerPackage = ProviderPackage.FromJson(jsonString);

namespace DotRegistry.Contract
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ProviderPackage : Provider
    {
        [JsonProperty("os", Required = Required.Always)]
        public string OperatingSystem { get; set; }

        [JsonProperty("arch", Required = Required.Always)]
        public string Architecture { get; set; }

        [JsonProperty("filename", Required = Required.Always)]
        public string Filename { get; set; }

        [JsonProperty("download_url", Required = Required.Always)]
        public Uri DownloadUrl { get; set; }

        [JsonProperty("shasums_url", Required = Required.Always)]
        public Uri ShasumsUrl { get; set; }

        [JsonProperty("shasums_signature_url", Required = Required.Always)]
        public Uri ShasumsSignatureUrl { get; set; }

        [JsonProperty("shasum", Required = Required.Always)]
        public string Shasum { get; set; }

        [JsonProperty("signing_keys", Required = Required.Always)]
        public SigningKeys SigningKeys { get; set; }

        public override string[] SlugProperties
        {
            get
            {
                string slug = $"{Namespace}-{Type}-{OperatingSystem}-{Architecture}-{ProviderVersion}";
                string b64Slug = Convert.ToBase64String(Encoding.Default.GetBytes(slug));
                return new string[]
                {
                    b64Slug
                };
            }
        }
    }

    public partial class SigningKeys
    {
        [JsonProperty("gpg_public_keys", Required = Required.Always)]
        public List<GpgPublicKey> GpgPublicKeys { get; set; }
    }

    public partial class GpgPublicKey
    {
        [JsonProperty("key_id", Required = Required.Always)]
        public string KeyId { get; set; }

        [JsonProperty("ascii_armor", Required = Required.Always)]
        public string AsciiArmor { get; set; }

        [JsonProperty("trust_signature", Required = Required.Always)]
        public string TrustSignature { get; set; }

        [JsonProperty("source", Required = Required.Always)]
        public string Source { get; set; }

        [JsonProperty("source_url", Required = Required.Always)]
        public Uri SourceUrl { get; set; }
    }

    public partial class ProviderPackage
    {
        public static ProviderPackage FromJson(string json) => JsonConvert.DeserializeObject<ProviderPackage>(json, DotRegistry.Contract.ProviderPackageConverter.Settings);
    }

    public static class SerializeProviderPackage
    {
        public static string ToJson(this ProviderPackage self) => JsonConvert.SerializeObject(self, DotRegistry.Contract.ProviderPackageConverter.Settings);
    }

    internal static class ProviderPackageConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
