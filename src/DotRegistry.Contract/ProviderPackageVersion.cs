// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DotRegistry.Contract;
//
//    var providerPackageVersion = ProviderPackageVersion.FromJson(jsonString);

namespace DotRegistry.Contract
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ProviderPackageVersion
    {
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        [JsonProperty("versions", Required = Required.Always)]
        public List<Version> Versions { get; set; }
    }

    public partial class Version
    {
        [JsonProperty("version", Required = Required.Always)]
        public string PackageVersion { get; set; }

        [JsonProperty("protocols", Required = Required.Always)]
        public List<string> Protocols { get; set; }

        [JsonProperty("platforms", Required = Required.Always)]
        public List<Platform> Platforms { get; set; }
    }

    public partial class Platform
    {
        [JsonProperty("os", Required = Required.Always)]
        public OsType OperatingSystem { get; set; }

        [JsonProperty("arch", Required = Required.Always)]
        public ArchUnion Architecture { get; set; }
    }

    public enum ArchitectureType { Amd64, Arm, Arm64 };

    public enum OsType { Darwin, Freebsd, Linux, Openbsd, Solaris, Windows };

    public partial struct ArchUnion
    {
        public ArchitectureType? Enum;
        public long? Integer;

        public static implicit operator ArchUnion(ArchitectureType Enum) => new ArchUnion { Enum = Enum };
        public static implicit operator ArchUnion(long Integer) => new ArchUnion { Integer = Integer };
    }

    public partial class ProviderPackageVersion
    {
        public static ProviderPackageVersion FromJson(string json) => JsonConvert.DeserializeObject<ProviderPackageVersion>(json, DotRegistry.Contract.ProviderPackageVersionConverter.Settings);
    }

    public static class SerializeProviderPackageVersion
    {
        public static string ToJson(this ProviderPackageVersion self) => JsonConvert.SerializeObject(self, DotRegistry.Contract.ProviderPackageVersionConverter.Settings);
    }

    internal static class ProviderPackageVersionConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ArchUnionConverter.Singleton,
                ArchEnumConverter.Singleton,
                OsConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ArchUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ArchUnion) || t == typeof(ArchUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "amd64":
                            return new ArchUnion { Enum = ArchitectureType.Amd64 };
                        case "arm":
                            return new ArchUnion { Enum = ArchitectureType.Arm };
                        case "arm64":
                            return new ArchUnion { Enum = ArchitectureType.Arm64 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ArchUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ArchUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ArchUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ArchitectureType.Amd64:
                        serializer.Serialize(writer, "amd64");
                        return;
                    case ArchitectureType.Arm:
                        serializer.Serialize(writer, "arm");
                        return;
                    case ArchitectureType.Arm64:
                        serializer.Serialize(writer, "arm64");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ArchUnion");
        }

        public static readonly ArchUnionConverter Singleton = new ArchUnionConverter();
    }

    internal class ArchEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ArchitectureType) || t == typeof(ArchitectureType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "amd64":
                    return ArchitectureType.Amd64;
                case "arm":
                    return ArchitectureType.Arm;
                case "arm64":
                    return ArchitectureType.Arm64;
            }
            throw new Exception("Cannot unmarshal type ArchEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ArchitectureType)untypedValue;
            switch (value)
            {
                case ArchitectureType.Amd64:
                    serializer.Serialize(writer, "amd64");
                    return;
                case ArchitectureType.Arm:
                    serializer.Serialize(writer, "arm");
                    return;
                case ArchitectureType.Arm64:
                    serializer.Serialize(writer, "arm64");
                    return;
            }
            throw new Exception("Cannot marshal type ArchEnum");
        }

        public static readonly ArchEnumConverter Singleton = new ArchEnumConverter();
    }

    internal class OsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OsType) || t == typeof(OsType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "darwin":
                    return OsType.Darwin;
                case "freebsd":
                    return OsType.Freebsd;
                case "linux":
                    return OsType.Linux;
                case "openbsd":
                    return OsType.Openbsd;
                case "solaris":
                    return OsType.Solaris;
                case "windows":
                    return OsType.Windows;
            }
            throw new Exception("Cannot unmarshal type Os");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OsType)untypedValue;
            switch (value)
            {
                case OsType.Darwin:
                    serializer.Serialize(writer, "darwin");
                    return;
                case OsType.Freebsd:
                    serializer.Serialize(writer, "freebsd");
                    return;
                case OsType.Linux:
                    serializer.Serialize(writer, "linux");
                    return;
                case OsType.Openbsd:
                    serializer.Serialize(writer, "openbsd");
                    return;
                case OsType.Solaris:
                    serializer.Serialize(writer, "solaris");
                    return;
                case OsType.Windows:
                    serializer.Serialize(writer, "windows");
                    return;
            }
            throw new Exception("Cannot marshal type Os");
        }

        public static readonly OsConverter Singleton = new OsConverter();
    }
}
